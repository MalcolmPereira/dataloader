# https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.server
server.shutdown=immediate
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xm

# https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.server
#We are allowing files upto 10GB for upload
spring.servlet.multipart.max-file-size=10096MB
spring.servlet.multipart.max-request-size=10096MB
#Specify temp location for multipart so a special mount can be set up for large uploads
#spring.servlet.multipart.location=C:\\temp\\temp_files


#https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.data.spring.datasource.driver-class-name
#Key properties in the JDBC driver are connectRetryInterval=20;connectRetryCount=3;cancelQueryTimeout=5;socketTimeout=30000
#With these any hung statements or SQL Server either waiting to be processed are cancelled, and the Spring Retry will retry the DAO operation again
spring.datasource.url=jdbc:sqlserver://10.85.24.164:1433;databaseName=highvolumedb;integratedSecurity=false;encrypt=false;queryTimeout=60;connectRetryInterval=60;connectRetryCount=3;cancelQueryTimeout=60;socketTimeout=30000;
spring.datasource.username=sa
spring.datasource.password=passw0rd
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.datasource.hikari.maximum-pool-size=25
spring.datasource.hikari.connectionTimeout=60000
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.leak-detection-threshold=60000
server.jetty.connection-idle-timeout=120000ms
server.jetty.threads.idle-timeout=60000ms
server.jetty.threads.max=200
server.jetty.threads.min=100
spring.mvc.async.request-timeout=1800000ms

#Actuator
#https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.actuator
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.endpoint.health.group.custom.include=db
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true
management.endpoint.loggers.enabled=true
management.endpoint.metrics.enabled=true
management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.exclude=
management.endpoints.jmx.exposure.include=*
management.endpoints.jmx.exposure.exclude=
management.prometheus.metrics.export.enabled=true

#https://springdoc.org
# SpringDoc Open API Documentation
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/api.html
springdoc.writer-with-default-pretty-printer=true
springdoc.remove-broken-reference-definitions=false
springdoc.packages-to-scan=com.malcolm.dataloader

#Batch Size for the SQL Batch Inserts
#dataloader.batch.size=150
dataloader.batch.size=250
#Max requests that can be handled concurrently
#Psuedo Rate Limiter Limit
dataloader.max.requests=5
#Cache Time to Live in minutes 3 Hours
dataloader.cache.ttl=180
#Cache clean up interval schedule
#Everry minute 0 * * * * *
#Everry hour 0 0 * * * *
dataloader.cache.cleanup.cron=0 0 * * * *
#Tagetted CPU Utilization for thread pool in percentage upto 100%
#0.80 80% - 0.95 95% and so on
dataloader.cpu.utilization=0.80
#CPU Wait time for thread pool calculation in milliseconds, this is the time cpu waiting on I/O bound tasks
#5 Second
dataloader.cpu.wait.time=5000
#CPU Process time for thread pool calculation in milliseconds, this is the time cpu is performing a compute task
#369ms
dataloader.cpu.process.time=360
#Core/TargetCPU Utilization/WaitTime/ProcessTime ==> Max Pool Size
#2/0.80/5000/360   ==> 24 
#2/0.80/4000/3000  ==> 4 
#2/0.80/5000/1000  ==> 10
#2/0.80/3000/1000  ==> 7 and so on
#More Cores/More Long Running I/O activities increase thread pool
#More Cores/More CPU activities increase thread pool only by CPU core


